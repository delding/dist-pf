#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.5 on Mon Jan 21 18:03:46 2013

import wx
from matplotlib.figure import Figure
import numpy as np
import ctypes
import matplotlib.font_manager as font_manager
from matplotlib.backends.backend_wxagg import FigureCanvasWxAgg as FigureCanvas
from matplotlib.mlab import normpdf
import threading
# begin wxGlade: extracode
# end wxGlade

#TODO: use structure to put paremeters together
del_lib = np.ctypeslib.load_library('libdel22_so.so','.')
#int, string and unicode string can be converted to C data type without being wrapped by ctypes
#all other data types have to be wrapped into ctypes in order to be valid arguments converted to C funtion
#argument of function POINTER is a ctypes type while argument of function pointer is a ctypes instance
#POINTER() return a pointer type, pointer() returns a pointer instance
del_lib.filtering.argtypes = [ctypes.c_int, ctypes.c_int, ctypes.c_int, ctypes.c_double, ctypes.c_int,\
                              ctypes.c_char_p, \
                              ctypes.POINTER(ctypes.c_double), ctypes.POINTER(ctypes.c_double),\
                              ctypes.POINTER(ctypes.c_double), ctypes.POINTER(ctypes.c_double),\
                              ctypes.POINTER(ctypes.c_double), ctypes.POINTER(ctypes.c_double),\
                              ctypes.POINTER(ctypes.c_double), ctypes.POINTER(ctypes.c_double),\
                              ctypes.POINTER(ctypes.c_double), ctypes.POINTER(ctypes.c_double),\
                              ctypes.POINTER(ctypes.c_double), ctypes.POINTER(ctypes.c_double),\
                              ctypes.POINTER(ctypes.c_double), ctypes.POINTER(ctypes.c_double),\
                              ctypes.POINTER(ctypes.c_double), ctypes.POINTER(ctypes.c_double),\
                              ctypes.POINTER(ctypes.c_double), ctypes.POINTER(ctypes.c_double),\
                              ctypes.POINTER(ctypes.c_double), ctypes.POINTER(ctypes.c_double)]
del_lib.filtering.restype = ctypes.c_void_p

del_lib.initializeSystem.argtypes = [ctypes.c_void_p]
del_lib.initializeSystem.restype = ctypes.c_int



class parameter_panel2(wx.Panel):
    def __init__(self, *args, **kwds):
        # begin wxGlade: parameter_panel2.__init__
        kwds["style"] = wx.TAB_TRAVERSAL
        wx.Panel.__init__(self, *args, **kwds)

        self.__set_properties()
        self.__do_layout()
        # end wxGlade
        self.figure = Figure(figsize=(6,4), dpi=80)
        self.canvas = FigureCanvas(self, wx.ID_ANY, self.figure)

        self.axes_alpha_beta = self.figure.add_subplot(211)
        self.axes_ab = self.figure.add_subplot(212)
        self.axes_alpha_beta.set_autoscale_on(False)
        #self.axes_ab.set_autoscale_on(False)
        self.axes_alpha_beta.set_xlim([0,100])
        self.axes_alpha_beta.set_ylim([0,1])
        self.axes_alpha_beta.set_xticks(range(0,101,100))
        self.axes_ab.set_xlim([0,100])
        #self.axes_ab.set_ylim([])
        self.axes_ab.set_xticks(range(0,101,5))
        self.params = [None]*9;
        self.param_file = open('params')
        for i in range(9):
            self.params[i] = float(self.param_file.readline())
        self.param_file.close()
        
        self.alpha = [None] * 100
        self.beta = [None] * 100
        self.a00 = [None] * 100
        self.b00 = [None] * 100
        self.a11 = [None] * 100
        self.b11 = [None] * 100
        self.real_alpha = [self.params[3]] * 100
        self.real_beta = [self.params[4]] * 100
        self.real_a00 = [self.params[5]] * 100
        self.real_b00 = [self.params[6]] * 100
        self.real_a11 = [self.params[7]] * 100
        self.real_b11 = [self.params[8]] * 100
        
        self.l_alpha, = self.axes_alpha_beta.plot(range(100), self.alpha, label='estimated alpha') 
        self.l_real_alpha, = self.axes_alpha_beta.plot(range(100), self.real_alpha, label='alpha')
        self.l_beta, = self.axes_alpha_beta.plot(range(100), self.beta, label='estimated beta') 
        self.l_real_beta, = self.axes_alpha_beta.plot(range(100), self.real_beta, label='beta')       
        self.l_a00, = self.axes_ab.plot(range(100), self.a00, label='estimated a00') 
        self.l_real_a00, = self.axes_ab.plot(range(100), self.real_a00, label='a00')      
        self.l_b00, = self.axes_ab.plot(range(100), self.b00, label='estimated b00') 
        self.l_real_b00, = self.axes_ab.plot(range(100), self.real_b00, label='b00')        
        self.l_a11, = self.axes_ab.plot(range(100), self.a11, label='estimated a11') 
        self.l_real_a11, = self.axes_ab.plot(range(100), self.real_a11, label='a11')        
        self.l_b11, = self.axes_ab.plot(range(100), self.b11, label='estimated b11') 
        self.l_real_b11, = self.axes_ab.plot(range(100), self.real_b11, label='b11') 

        self.axes_alpha_beta.legend(loc='upper center', ncol=4, prop=font_manager.FontProperties(size=9))
        self.axes_ab.legend(loc='upper center', ncol=4, prop=font_manager.FontProperties(size=7))
        self.axes_ab.set_xlabel('time (s)')
        self.axes_alpha_beta.set_title("parameters")

        
        self.canvas.draw()
        self.bg_alpha_beta = self.canvas.copy_from_bbox(self.axes_alpha_beta.bbox)
        self.bg_ab = self.canvas.copy_from_bbox(self.axes_ab.bbox)   
        
    def __set_properties(self):
        # begin wxGlade: parameter_panel2.__set_properties
        pass
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: parameter_panel2.__do_layout
        pass
        # end wxGlade

# end of class parameter_panel2

class con_states_panel2(wx.Panel):
    def __init__(self, *args, **kwds):
        # begin wxGlade: con_states_panel2.__init__
        kwds["style"] = wx.TAB_TRAVERSAL
        wx.Panel.__init__(self, *args, **kwds)

        self.__set_properties()
        self.__do_layout()
        # end wxGlade
        
        self.figure = Figure(figsize=(6,4), dpi=80)
        self.axes_x = self.figure.add_subplot(211)
        self.axes_vol = self.figure.add_subplot(212)
        self.canvas = FigureCanvas(self, wx.ID_ANY, self.figure)
        self.axes_x.set_autoscale_on(False)
        #self.axes_x.axis([-5,5,0,1])
        self.axes_x.set_title('histogram')
        self.axes_vol.set_autoscale_on(False)
        #self.axes_vol.axis([0,5,0,1])
        self.axes_x.set_ylabel('return')
        self.axes_vol.set_ylabel('volatility')

        #self.axes_vol.set_title('Histogram')
        #self.particles = [None] 
        #self.axes.hist(self.particles, 25, label = "Histogram") #hist return 3 elements tuple
        #self.axes.legend()
        self.canvas.draw()
        #self.bg = self.canvas.copy_from_bbox(self.axes.bbox)
        

    def __set_properties(self):
        # begin wxGlade: con_states_panel2.__set_properties
        pass
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: con_states_panel2.__do_layout
        pass
        # end wxGlade

# end of class con_states_panel2

class parameter_panel1(wx.Panel):
    def __init__(self, *args, **kwds):
        # begin wxGlade: parameter_panel1.__init__
        kwds["style"] = wx.TAB_TRAVERSAL
        wx.Panel.__init__(self, *args, **kwds)

        self.__set_properties()
        self.__do_layout()
        # end wxGlade
        
        self.figure = Figure(figsize=(6,4), dpi=80)
        self.canvas = FigureCanvas(self, wx.ID_ANY, self.figure)
        self.axes_mu = self.figure.add_subplot(211)
        self.axes_c = self.figure.add_subplot(212)
       
        self.axes_mu.set_autoscale_on(False)
        self.axes_c.set_autoscale_on(False)
        self.axes_mu.set_xlim([0,100])
        self.axes_mu.set_ylim([-5,5])
        self.axes_mu.set_xticks(range(0,101,100))
        #self.axes_mu.set_yticks(range(-5,6,1))
        self.axes_c.set_xlim([0,100])
        self.axes_c.set_ylim([0,2])
        self.axes_c.set_xticks(range(0,101,5))
        self.axes_mu.set_title("parameters")
    
        self.params = [None]*9;
        self.param_file = open('params')
        for i in range(9):
            self.params[i] = float(self.param_file.readline())
        self.param_file.close()
        #store mean of each parameter up to time 100, different from those input parameters to function filtering
        self.mu = [None] * 100
        self.c0 = [None] * 100
        self.c1 = [None] * 100
        self.real_mu = [self.params[0]] * 100
        self.real_c0 = [self.params[1]] * 100
        self.real_c1 = [self.params[2]] * 100

        
        self.l_mu, = self.axes_mu.plot(range(100), self.mu, label='estimated mu') 
        self.l_real_mu, = self.axes_mu.plot(range(100), self.real_mu, label='mu')
        self.l_c0, = self.axes_c.plot(range(100), self.c0, label='estimated c0') 
        self.l_real_c0, = self.axes_c.plot(range(100), self.real_c0, label='c0')
        self.l_c1, = self.axes_c.plot(range(100), self.c1, label='estimated c1') 
        self.l_real_c1, = self.axes_c.plot(range(100), self.real_c1, label='c1')
        
        self.axes_mu.legend(loc='upper center', ncol=2, prop=font_manager.FontProperties(size=10))
        self.axes_c.legend(loc='upper center', ncol=4, prop=font_manager.FontProperties(size=10))
        self.axes_c.set_xlabel('time (s)')
        
        self.canvas.draw()
        self.bg_mu = self.canvas.copy_from_bbox(self.axes_mu.bbox)
        self.bg_c = self.canvas.copy_from_bbox(self.axes_c.bbox)
       
    def __set_properties(self):
        # begin wxGlade: parameter_panel1.__set_properties
        pass
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: parameter_panel1.__do_layout
        pass
        # end wxGlade

# end of class parameter_panel1

class ob_panel(wx.Panel):
    def __init__(self, *args, **kwds):
        # begin wxGlade: ob_panel.__init__
        kwds["style"] = wx.TAB_TRAVERSAL
        wx.Panel.__init__(self, *args, **kwds)

        self.__set_properties()
        self.__do_layout()
        # end wxGlade
        
        self.figure = Figure(figsize=(6,4), dpi=80)
        self.axes = self.figure.add_subplot(111)
        self.canvas = FigureCanvas(self, wx.ID_ANY, self.figure)
        self.axes.set_autoscale_on(False)
        self.axes.set_xlim([0,100])
        self.axes.set_ylim([-5,5])
        self.axes.set_xticks(range(0,101,5))
        self.axes.set_yticks(range(-5,6,1))
        self.data = [None] * 100
        self.data_up2_now = [None] * 100
        self.data_file = open('data')
        for i in range(100):
            self.data[i] = float(self.data_file.readline())
        self.data_file.close()
        self.axes.set_title('observations')
        self.axes.set_xlabel('time (s)')
        self.l_data, = self.axes.plot(range(100), self.data_up2_now, 'kx')
        self.bg = self.canvas.copy_from_bbox(self.axes.bbox)


    def __set_properties(self):
        # begin wxGlade: ob_panel.__set_properties
        pass
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: ob_panel.__do_layout
        pass
        # end wxGlade

# end of class ob_panel
class con_states_panel1(wx.Panel):
    def __init__(self, *args, **kwds):
        # begin wxGlade: con_states_panel1.__init__
        kwds["style"] = wx.TAB_TRAVERSAL
        wx.Panel.__init__(self, *args, **kwds)

        self.__set_properties()
        self.__do_layout()
        # end wxGlade
        
        self.figure = Figure(figsize=(6,4), dpi=80)
        self.axes_x = self.figure.add_subplot(211)
        self.axes_vol = self.figure.add_subplot(212)
        self.canvas = FigureCanvas(self, wx.ID_ANY, self.figure)
        self.axes_x.set_autoscale_on(False)
        self.axes_x.set_xlim([0,100])
        self.axes_x.set_ylim([-5,5])
        self.axes_x.set_xticks(range(0,101,100))
        #self.axes_x.set_yticks(range(-10,11,2))
        self.exp_x = [None] * 100
        self.percentile_x_95 = [None] * 100
        self.percentile_x_5 = [None] * 100
        self.real_x = [None] * 100
        self.axes_vol.set_autoscale_on(False)
        self.axes_vol.set_xlim([0,100])
        self.axes_vol.set_ylim([0,6])
        self.axes_vol.set_xticks(range(0,101,5))
        #self.axes_vol.set_yticks(range(0,7,1))
        self.exp_vol = [None] * 100
        self.percentile_vol_95 = [None] * 100
        self.percentile_vol_5 = [None] * 100
        self.real_vol = [None] * 100
        self.real_x_up2now = [None] * 100
        self.real_vol_up2now = [None] * 100

        
        self.con_states_file = open('con_states')
        for i in range(100):
            self.real_x[i] = float(self.con_states_file.readline())
            self.real_vol[i] = float(self.con_states_file.readline())
        self.con_states_file.close()
        self.l_exp_x, = self.axes_x.plot(range(100), self.exp_x, label='estimated value') #plot return one element tuple
        self.l_real_x, = self.axes_x.plot(range(100), self.real_x_up2now, label='real value')
        self.l_percentile_x_95, = self.axes_x.plot(range(100), self.percentile_x_95, label='95% percentile')
        self.l_percentile_x_5, = self.axes_x.plot(range(100), self.percentile_x_5, label='5% percentile')
        self.axes_x.legend(loc='upper center', ncol=4, prop=font_manager.FontProperties(size=8))
        self.axes_x.set_title('return')
        self.l_exp_vol, = self.axes_vol.plot(range(100), self.exp_vol, label='estimated value') #plot return one element tuple
        self.l_real_vol, = self.axes_vol.plot(range(100), self.real_vol_up2now, label='real value')
        self.l_percentile_vol_95, = self.axes_vol.plot(range(100), self.percentile_vol_95, label='95% percentile')
        self.l_percentile_vol_5, = self.axes_vol.plot(range(100), self.percentile_vol_5, label='5% percentile')
        #self.axes_vol.legend(loc='upper center', ncol=4, prop=font_manager.FontProperties(size=10))
        self.axes_vol.set_title('volatility')
        
        self.axes_vol.set_xlabel('time (s)')

        self.canvas.draw()
        self.bg_x = self.canvas.copy_from_bbox(self.axes_x.bbox)
        self.bg_vol = self.canvas.copy_from_bbox(self.axes_vol.bbox)

    def __set_properties(self):
        # begin wxGlade: con_states_panel1.__set_properties
        pass
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: con_states_panel1.__do_layout
        pass
        # end wxGlade

# end of class con_states_panel1

class mode_panel(wx.Panel):
    def __init__(self, *args, **kwds):
        # begin wxGlade: mode_panel.__init__
        kwds["style"] = wx.TAB_TRAVERSAL
        wx.Panel.__init__(self, *args, **kwds)

        self.__set_properties()
        self.__do_layout()
        # end wxGlade
        
        self.figure = Figure(figsize=(6,4), dpi=80)
        self.axes_q = self.figure.add_subplot(211)
        self.axes_real_q = self.figure.add_subplot(212)
        self.canvas = FigureCanvas(self, wx.ID_ANY, self.figure)
        self.axes_q.set_autoscale_on(False)
        self.axes_q.set_xlim([0,100])
        self.axes_q.set_ylim([0,1])
        self.axes_q.set_xticks(range(0,101,100))        

        self.axes_real_q.set_autoscale_on(False)
        self.axes_real_q.set_xlim([0,100])
        self.axes_real_q.set_ylim([0,1])
        self.axes_real_q.set_xticks(range(0,101,5))
        self.axes_real_q.set_yticks(range(0,2,1))
        self.prob_q0 = [None] * 100
        self.prob_q1 = [None] * 100
        self.real_q = [None] * 100
        self.real_q_up2now = [None]*100
        
        self.q_file = open('dis_states')
        for i in range(100):
            self.real_q[i] = float(self.q_file.readline())
        self.q_file.close()
        self.l_prob_q0, = self.axes_q.plot(range(100), self.prob_q0, 'x', label='probability of mode 0') #plot return one element tuple
        self.l_prob_q1, = self.axes_q.plot(range(100), self.prob_q1, 'x', label='probability of mode 1')
        self.l_real_q, = self.axes_real_q.plot(range(100), self.real_q_up2now,'x')
        self.axes_q.legend(loc='upper center', ncol=2, prop=font_manager.FontProperties(size=10))
        self.axes_q.set_title('estimated probabilities of modes')
        self.axes_real_q.set_title('ture mode')
        self.axes_real_q.set_xlabel('time (s)')

        self.canvas.draw()
        self.bg_q = self.canvas.copy_from_bbox(self.axes_q.bbox)
        self.bg_real_q = self.canvas.copy_from_bbox(self.axes_real_q.bbox)

        
    def __set_properties(self):
        # begin wxGlade: mode_panel.__set_properties
        pass
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: mode_panel.__do_layout
        pass
        # end wxGlade

# end of class mode_panel

class MyFrame(wx.Frame):
    #TODO: move arguments of del_lib.filtering into Parameters and code its corresponding C structure
    class Parameters(ctypes.Structure):
        _fields_ = []
    
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.label_1 = wx.StaticText(self, -1, "                                                                                         Auxiliary-IMM Particle FIlter")
        self.label_2 = wx.StaticText(self, -1, "      Models", style=wx.ST_NO_AUTORESIZE)
        self.label_3 = wx.StaticText(self, -1, "      Data File")
        self.label_4 = wx.StaticText(self, -1, " Resample Types")
        self.label_5 = wx.StaticText(self, -1, "   Time step (s)")
        self.label_6 = wx.StaticText(self, -1, "Particle numbers")
        self.label_7 = wx.StaticText(self, -1, "  Mode \nnumbers")
        self.label_8 = wx.StaticText(self, -1, "            Names of \n  Continuous states")
        self.label_9 = wx.StaticText(self, -1, "      Names of \n    Parameters")
        self.panel_1 = wx.Panel(self, -1)
        self.button_1 = wx.Button(self, -1, "  Start/Restart")
        self.choice_1 = wx.Choice(self, -1, choices=["RS-GARCH"])
        self.text_ctrl_1 = wx.TextCtrl(self, -1, "data")
        self.choice_2 = wx.Choice(self, -1, choices=["Multinominal", "Residual", "Systematic", "Stratified"])
        self.text_ctrl_2 = wx.TextCtrl(self, -1, "1.0")
        self.text_ctrl_3 = wx.TextCtrl(self, -1, "100")
        self.text_ctrl_4 = wx.TextCtrl(self, -1, "")
        self.text_ctrl_5 = wx.TextCtrl(self, -1, "")
        self.text_ctrl_6 = wx.TextCtrl(self, -1, "")
        self.panel_2 = wx.Panel(self, -1)
        self.button_2 = wx.Button(self, -1, "Pause/Resume")
        self.con_states_panel1 = con_states_panel1(self, -1)
        self.mode_panel = mode_panel(self, -1)
        self.parameter_panel2 = parameter_panel2(self, -1)
        self.con_states_panel2 = con_states_panel2(self, -1)
        self.parameter_panel1 = parameter_panel1(self, -1)
        self.ob_panel = ob_panel(self, -1)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.runFilter, self.button_1)
        self.Bind(wx.EVT_BUTTON, self.stopFilter, self.button_2)
        # end wxGlade
        
        self.timer = wx.Timer(self)
        self.Bind(wx.EVT_TIMER, self.onTimer, self.timer)
 
        self.model_index =0
        self.filter_index =0
        self.resample_index=0    
        self.started = 0 
        self.stop_pause_count = 0
        self.ptr_isInitialized = ctypes.c_void_p()#represents C void* type         
        
          
    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle("Del_app")
        self.label_1.SetFont(wx.Font(15, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.label_2.SetMinSize((123, 31))
        self.label_2.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.label_3.SetMinSize((123, 31))
        self.label_3.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.label_4.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.label_5.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.label_6.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.label_7.SetFont(wx.Font(11, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.panel_1.SetMinSize((135, 29))
        self.button_1.SetMinSize((135, 29))
        self.button_1.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.choice_1.SetMinSize((123, 31))
        self.choice_1.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.choice_1.SetSelection(0)
        self.text_ctrl_1.SetMinSize((123, 31))
        self.text_ctrl_1.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.choice_2.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.choice_2.SetSelection(0)
        self.text_ctrl_2.SetMinSize((100, 29))
        self.text_ctrl_2.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.text_ctrl_3.SetMinSize((100, 27))
        self.text_ctrl_4.SetMinSize((71, 27))
        self.text_ctrl_4.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.text_ctrl_5.SetMinSize((135, 29))
        self.text_ctrl_5.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.text_ctrl_6.SetMinSize((135, 29))
        self.panel_2.SetMinSize((135, 29))
        self.button_2.SetMinSize((135, 29))
        self.button_2.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        grid_sizer_3 = wx.GridSizer(2, 3, 0, 0)
        grid_sizer_2 = wx.GridSizer(2, 10, 0, 0)
        sizer_2.Add(self.label_1, 0, 0, 0)
        grid_sizer_2.Add(self.label_2, 0, 0, 0)
        grid_sizer_2.Add(self.label_3, 0, 0, 0)
        grid_sizer_2.Add(self.label_4, 0, 0, 0)
        grid_sizer_2.Add(self.label_5, 0, 0, 0)
        grid_sizer_2.Add(self.label_6, 0, 0, 0)
        grid_sizer_2.Add(self.label_7, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        grid_sizer_2.Add(self.label_8, 0, wx.EXPAND, 0)
        grid_sizer_2.Add(self.label_9, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        grid_sizer_2.Add(self.panel_1, 1, wx.ALIGN_CENTER_HORIZONTAL, 0)
        grid_sizer_2.Add(self.button_1, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        grid_sizer_2.Add(self.choice_1, 0, 0, 0)
        grid_sizer_2.Add(self.text_ctrl_1, 0, 0, 0)
        grid_sizer_2.Add(self.choice_2, 0, 0, 0)
        grid_sizer_2.Add(self.text_ctrl_2, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        grid_sizer_2.Add(self.text_ctrl_3, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        grid_sizer_2.Add(self.text_ctrl_4, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        grid_sizer_2.Add(self.text_ctrl_5, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        grid_sizer_2.Add(self.text_ctrl_6, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        grid_sizer_2.Add(self.panel_2, 1, wx.ALIGN_CENTER_HORIZONTAL, 0)
        grid_sizer_2.Add(self.button_2, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_2.Add(grid_sizer_2, 0, 0, 0)
        grid_sizer_3.Add(self.con_states_panel1, 1, wx.EXPAND, 0)
        grid_sizer_3.Add(self.mode_panel, 1, wx.EXPAND, 0)
        grid_sizer_3.Add(self.parameter_panel2, 1, wx.EXPAND, 0)
        grid_sizer_3.Add(self.con_states_panel2, 1, wx.EXPAND, 0)
        grid_sizer_3.Add(self.parameter_panel1, 1, wx.EXPAND, 0)
        grid_sizer_3.Add(self.ob_panel, 1, wx.EXPAND, 0)
        sizer_2.Add(grid_sizer_3, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_2)
        sizer_2.Fit(self)
        self.Layout()
        # end wxGlade

    def runFilter(self, event):  # wxGlade: MyFrame.<event_handler>
        if self.started is not 0:  #to restart the program, condition test is true if not the first time click on Start/Restart button
            del_lib.initializeSystem(self.ptr_isInitialized)#for initializing particle_system object when calling filtering(...)
            self.i = 0

            self.mode_panel.prob_q0 = [None] * 100
            self.mode_panel.prob_q1 = [None] * 100
            self.mode_panel.real_q_up2now = [None]*100
            
            self.con_states_panel1.exp_x = [None] * 100
            self.con_states_panel1.percentile_x_95 = [None] * 100
            self.con_states_panel1.percentile_x_5 = [None] * 100
            self.con_states_panel1.exp_vol = [None] * 100
            self.con_states_panel1.percentile_vol_95 = [None] * 100
            self.con_states_panel1.percentile_vol_5 = [None] * 100
            self.con_states_panel1.real_x_up2now = [None] * 100
            self.con_states_panel1.real_vol_up2now = [None] * 100
           
            self.parameter_panel1.mu = [None] * 100
            self.parameter_panel1.c0 = [None] * 100
            self.parameter_panel1.c1 = [None] * 100
            self.parameter_panel2.alpha = [None] * 100
            self.parameter_panel2.beta = [None] * 100
            self.parameter_panel2.a00 = [None] * 100
            self.parameter_panel2.b00 = [None] * 100
            self.parameter_panel2.a11 = [None] * 100
            self.parameter_panel2.b11 = [None] * 100
            
            self.ob_panel.data_up2_now = [None] * 100
        
        self.started = 1#first time click on Start/Restart button
        self.data_file = str(self.text_ctrl_1.GetValue())
        self.resample = self.choice_2.GetStringSelection()
        self.resample_index = self.choice_2.GetSelection()
        self.model = self.choice_1.GetStringSelection()
        self.model_index = self.choice_1.GetSelection()
        self.time_step = float(self.text_ctrl_2.GetValue())
        self.particle_number = int(self.text_ctrl_3.GetValue())
        self.weight = np.arange(1,self.particle_number+1,1.0)
        self.state_x = np.arange(1,self.particle_number+1,1.0)
        self.state_vol = np.arange(1,self.particle_number+1,1.0)
        
        #since histogram of parameters are not drawn, partilces of all parameters are not used
        self.mu = np.arange(1,self.particle_number+1,1.0)
        self.c0 = np.arange(1,self.particle_number+1,1.0)
        self.c1 = np.arange(1,self.particle_number+1,1.0)
        self.alpha = np.arange(1,self.particle_number+1,1.0)
        self.beta = np.arange(1,self.particle_number+1,1.0)
        self.a00 = np.arange(1,self.particle_number+1,1.0)
        self.b00 = np.arange(1,self.particle_number+1,1.0)
        self.a11 = np.arange(1,self.particle_number+1,1.0)
        self.b11 = np.arange(1,self.particle_number+1,1.0)
        
        self.mean_x = np.arange(1.0)
        self.mean_vol = np.arange(1.0)
        self.x_95 = np.arange(1.0)
        self.x_5 = np.arange(1.0)
        self.vol_95 = np.arange(1.0)
        self.vol_5 = np.arange(1.0)
        self.prob_q = np.arange(1.0)
        self.i = 0
        self.mean_params = np.arange(9.0) #store mean value of each parameters at every iteration
        #self.thread_dead = True;
        self.timer.Start(1000*self.time_step)
        self.stop_pause_count = 0

    def stopFilter(self, event):  # wxGlade: MyFrame.<event_handler>
        self.stop_pause_count = self.stop_pause_count + 1
        if self.stop_pause_count % 2 is 1:
            self.timer.Stop()
        else: 
            self.timer.Start(1000*self.time_step)        
        '''self.con_states_panel1.axes_x.clear()
        self.con_states_panel1.axes_vol.clear()
        self.con_states_panel1.canvas.restore_region(self.con_states_panel1.bg_x)
        self.con_states_panel1.canvas.restore_region(self.con_states_panel1.bg_vol)
        self.con_states_panel1.canvas.draw()

        self.con_states_panel2.axes_x.clear()
        self.con_states_panel2.axes_vol.clear()
        self.mode_panel.axes_q.clear()
        self.mode_panel.axes_real_q.clear()
        self.parameter_panel1.axes_mu.clear()
        self.parameter_panel1.axes_c.clear()
        self.parameter_panel2.axes_ab.clear()
        self.parameter_panel2.axes_alpha_beta.clear()
        self.ob_panel.axes.clear() 
        self.con_states_panel1.canvas.restore_region(self.con_states_panel1.bg_x)
        self.con_states_panel1.canvas.restore_region(self.con_states_panel1.bg_vol)
        self.con_states_panel1.canvas.draw()
        #self.con_states_panel1 = con_states_panel1(self, -1)

        self.mode_panel = mode_panel(self, -1)
        self.parameter_panel2 = parameter_panel2(self, -1)
        self.con_states_panel2 = con_states_panel2(self, -1)
        self.parameter_panel1 = parameter_panel1(self, -1)
        self.ob_panel = ob_panel(self, -1)'''
      

        
    def onTimer(self, event):
        self.ptr_isInitialized = del_lib.filtering(self.model_index, self.filter_index, self.resample_index,\
                                 self.time_step, self.particle_number, self.data_file,\
                                 self.weight.ctypes.data_as(ctypes.POINTER(ctypes.c_double)),\
                                 self.state_x.ctypes.data_as(ctypes.POINTER(ctypes.c_double)),\
                                 self.state_vol.ctypes.data_as(ctypes.POINTER(ctypes.c_double)),\
                                 self.mu.ctypes.data_as(ctypes.POINTER(ctypes.c_double)),\
                                 self.c0.ctypes.data_as(ctypes.POINTER(ctypes.c_double)),\
                                 self.c1.ctypes.data_as(ctypes.POINTER(ctypes.c_double)),\
                                 self.alpha.ctypes.data_as(ctypes.POINTER(ctypes.c_double)),\
                                 self.beta.ctypes.data_as(ctypes.POINTER(ctypes.c_double)),\
                                 self.a00.ctypes.data_as(ctypes.POINTER(ctypes.c_double)),\
                                 self.b00.ctypes.data_as(ctypes.POINTER(ctypes.c_double)),\
                                 self.a11.ctypes.data_as(ctypes.POINTER(ctypes.c_double)),\
                                 self.b11.ctypes.data_as(ctypes.POINTER(ctypes.c_double)),\
                                 self.mean_x.ctypes.data_as(ctypes.POINTER(ctypes.c_double)),\
                                 self.mean_vol.ctypes.data_as(ctypes.POINTER(ctypes.c_double)),\
                                 self.x_95.ctypes.data_as(ctypes.POINTER(ctypes.c_double)),\
                                 self.x_5.ctypes.data_as(ctypes.POINTER(ctypes.c_double)),\
                                 self.vol_95.ctypes.data_as(ctypes.POINTER(ctypes.c_double)),\
                                 self.vol_5.ctypes.data_as(ctypes.POINTER(ctypes.c_double)),\
                                 self.prob_q.ctypes.data_as(ctypes.POINTER(ctypes.c_double)),\
                                 self.mean_params.ctypes.data_as(ctypes.POINTER(ctypes.c_double)))  
        
        self.con_states_panel1.exp_x[self.i] = self.mean_x[0]
        self.con_states_panel1.exp_vol[self.i] = self.mean_vol[0]
        self.con_states_panel1.percentile_x_95[self.i] = self.x_95[0]
        self.con_states_panel1.percentile_x_5[self.i] = self.x_5[0]
        self.con_states_panel1.percentile_vol_95[self.i] = self.vol_95[0]
        self.con_states_panel1.percentile_vol_5[self.i] = self.vol_5[0]
        self.con_states_panel1.real_x_up2now[self.i] = self.con_states_panel1.real_x[self.i]
        self.con_states_panel1.real_vol_up2now[self.i] = self.con_states_panel1.real_vol[self.i]
        self.mode_panel.real_q_up2now[self.i] = self.mode_panel.real_q[self.i]
        self.mode_panel.prob_q0[self.i] = self.prob_q[0]
        self.mode_panel.prob_q1[self.i] = 1 - self.prob_q[0]
        
        self.parameter_panel1.mu[self.i] = self.mean_params[0]
        self.parameter_panel1.c0[self.i] = self.mean_params[1]
        self.parameter_panel1.c1[self.i] = self.mean_params[2]
        self.parameter_panel2.alpha[self.i] = self.mean_params[3]
        self.parameter_panel2.beta[self.i] = self.mean_params[4]
        self.parameter_panel2.a00[self.i] = self.mean_params[5]
        self.parameter_panel2.b00[self.i] = self.mean_params[6]
        self.parameter_panel2.a11[self.i] = self.mean_params[7]
        self.parameter_panel2.b11[self.i] = self.mean_params[8]

        self.ob_panel.data_up2_now[self.i] = self.ob_panel.data[self.i]
        
        self.i = self.i + 1
        #retore background figure
        self.con_states_panel1.canvas.restore_region(self.con_states_panel1.bg_x)
        self.con_states_panel1.canvas.restore_region(self.con_states_panel1.bg_vol)
        #set new data
        self.con_states_panel1.l_exp_x.set_ydata(self.con_states_panel1.exp_x)
        self.con_states_panel1.l_real_x.set_ydata(self.con_states_panel1.real_x_up2now)
        self.con_states_panel1.l_percentile_x_95.set_ydata(self.con_states_panel1.percentile_x_95)
        self.con_states_panel1.l_percentile_x_5.set_ydata(self.con_states_panel1.percentile_x_5)
        self.con_states_panel1.l_exp_vol.set_ydata(self.con_states_panel1.exp_vol)
        self.con_states_panel1.l_real_vol.set_ydata(self.con_states_panel1.real_vol_up2now)
        self.con_states_panel1.l_percentile_vol_95.set_ydata(self.con_states_panel1.percentile_vol_95)
        self.con_states_panel1.l_percentile_vol_5.set_ydata(self.con_states_panel1.percentile_vol_5)
        #draw_artist
        self.con_states_panel1.axes_x.draw_artist(self.con_states_panel1.l_exp_x)
        self.con_states_panel1.axes_x.draw_artist(self.con_states_panel1.l_real_x)
        self.con_states_panel1.axes_x.draw_artist(self.con_states_panel1.l_percentile_x_95)
        self.con_states_panel1.axes_x.draw_artist(self.con_states_panel1.l_percentile_x_5)
        self.con_states_panel1.axes_vol.draw_artist(self.con_states_panel1.l_exp_vol)
        self.con_states_panel1.axes_vol.draw_artist(self.con_states_panel1.l_real_vol)
        self.con_states_panel1.axes_vol.draw_artist(self.con_states_panel1.l_percentile_vol_95)
        self.con_states_panel1.axes_vol.draw_artist(self.con_states_panel1.l_percentile_vol_5)
        #blit
        self.con_states_panel1.canvas.blit(self.con_states_panel1.axes_x.bbox)
        self.con_states_panel1.canvas.blit(self.con_states_panel1.axes_vol.bbox)
        
        
        #
        self.mode_panel.canvas.restore_region(self.mode_panel.bg_q)
        self.mode_panel.canvas.restore_region(self.mode_panel.bg_real_q)
        
        self.mode_panel.l_prob_q0.set_ydata(self.mode_panel.prob_q0)
        self.mode_panel.l_prob_q1.set_ydata(self.mode_panel.prob_q1)
        self.mode_panel.l_real_q.set_ydata(self.mode_panel.real_q_up2now)
        
        self.mode_panel.axes_q.draw_artist(self.mode_panel.l_prob_q0)
        self.mode_panel.axes_q.draw_artist(self.mode_panel.l_prob_q1)
        self.mode_panel.axes_real_q.draw_artist(self.mode_panel.l_real_q)
        
        self.mode_panel.canvas.blit(self.mode_panel.axes_q.bbox)
        self.mode_panel.canvas.blit(self.mode_panel.axes_real_q.bbox)
        
        #
        self.parameter_panel1.canvas.restore_region(self.parameter_panel1.bg_mu)
        self.parameter_panel1.canvas.restore_region(self.parameter_panel1.bg_c)        
        
        self.parameter_panel1.l_mu.set_ydata(self.parameter_panel1.mu)
        self.parameter_panel1.l_c0.set_ydata(self.parameter_panel1.c0)
        self.parameter_panel1.l_c1.set_ydata(self.parameter_panel1.c1)

        self.parameter_panel1.axes_mu.draw_artist(self.parameter_panel1.l_mu)
        self.parameter_panel1.axes_c.draw_artist(self.parameter_panel1.l_c0)
        self.parameter_panel1.axes_c.draw_artist(self.parameter_panel1.l_c1)      
        
        self.parameter_panel1.canvas.blit(self.parameter_panel1.axes_mu.bbox)
        self.parameter_panel1.canvas.blit(self.parameter_panel1.axes_c.bbox)        
        
        # 
        self.parameter_panel2.canvas.restore_region(self.parameter_panel2.bg_alpha_beta)
        self.parameter_panel2.canvas.restore_region(self.parameter_panel2.bg_ab)        
        
        self.parameter_panel2.l_alpha.set_ydata(self.parameter_panel2.alpha)
        self.parameter_panel2.l_beta.set_ydata(self.parameter_panel2.beta)
        self.parameter_panel2.l_a00.set_ydata(self.parameter_panel2.a00)
        self.parameter_panel2.l_b00.set_ydata(self.parameter_panel2.b00)
        self.parameter_panel2.l_a11.set_ydata(self.parameter_panel2.a11)
        self.parameter_panel2.l_b11.set_ydata(self.parameter_panel2.b11)
        
        self.parameter_panel2.axes_alpha_beta.draw_artist(self.parameter_panel2.l_alpha)
        self.parameter_panel2.axes_alpha_beta.draw_artist(self.parameter_panel2.l_beta)
        self.parameter_panel2.axes_ab.draw_artist(self.parameter_panel2.l_a00)
        self.parameter_panel2.axes_ab.draw_artist(self.parameter_panel2.l_b00)    
        self.parameter_panel2.axes_ab.draw_artist(self.parameter_panel2.l_a11)
        self.parameter_panel2.axes_ab.draw_artist(self.parameter_panel2.l_b11)
                
        self.parameter_panel2.canvas.blit(self.parameter_panel2.axes_alpha_beta.bbox)
        self.parameter_panel2.canvas.blit(self.parameter_panel2.axes_ab.bbox)        
            
        #
        self.ob_panel.canvas.restore_region(self.ob_panel.bg)    
        self.ob_panel.l_data.set_ydata(self.ob_panel.data_up2_now)
        self.ob_panel.axes.draw_artist(self.ob_panel.l_data)
        self.ob_panel.canvas.blit(self.ob_panel.axes.bbox)
        
        
        #self.panel_10.canvas.restore_region(self.panel_10.bg)
        #self.panel_10.axes.hist(self.state, bins = 50, normed = True, weights = self.weight, label = "Histogram")
        #self.panel_10.canvas.draw()
        #self.panel_10.canvas.blit(self.panel_10.axes.bbox)
        
        #self.panel_10.figure = Figure(figsize=(6,4), dpi=80)
        #self.panel_10.axes = self.panel_10.figure.add_subplot(111)
        #self.panel_10.canvas = FigureCanvas(self, wx.ID_ANY, self.figure)
        #self.panel_10.axes.set_autoscale_on(False)
       # self.panel_10.axes.axis([-20,20,0,0.7])
       # self.panel_10.axes.set_title('Histogram')
        self.con_states_panel2.axes_x.clear()
        self.con_states_panel2.axes_vol.clear()
        #self.con_states_panel2.axes_x.set_autoscale_on(False)
        #self.con_states_panel2.axes_vol.set_autoscale_on(False)
        #self.con_states_panel2.axes_x.axis([-5,5,0,1])
        #self.con_states_panel2.axes_vol.axis([0,5,0,1])
        self.con_states_panel2.axes_x.set_title('Histogram')
        self.con_states_panel2.axes_x.set_ylabel('return')
        self.con_states_panel2.axes_vol.set_ylabel('volatility')
        
        #TODO: NAN occurs

        #sourse code where exception throws
        #            m, bins = np.histogram(x[i], bins, weights=w[i], **hist_kwargs)
        #    if normed:
        #        db = np.diff(bins)
        #        m = (m.astype(float) / db) / m.sum()'''
        pdf_x, bins_x, patches_x = self.con_states_panel2.axes_x.hist(self.state_x, bins = 100, normed = True, weights = self.weight, facecolor='green')
        pdf_vol, bins_vol, patches_vol = self.con_states_panel2.axes_vol.hist(self.state_vol, bins = 100, normed = True, weights = self.weight, facecolor='green')
        
        self.con_states_panel2.canvas.draw()
        
        #self.particles = [None] 
        #self.axes.hist(self.particles, 25, label = "Histogram") #hist return 3 elements tuple
        #self.axes.legend()
    

# end of class MyFrame
if __name__ == "__main__":
    Del_app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    frame_1 = MyFrame(None, -1, "")
    Del_app.SetTopWindow(frame_1)
    frame_1.Show()
    Del_app.MainLoop()
