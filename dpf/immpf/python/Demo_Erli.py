#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.4 on Wed Oct 17 03:36:53 2012

import wx
from matplotlib.figure import Figure
import numpy as np
import ctypes
import matplotlib.font_manager as font_manager
from matplotlib.backends.backend_wxagg import FigureCanvasWxAgg as FigureCanvas
from matplotlib.mlab import normpdf
import threading

# begin wxGlade: extracode
# end wxGlade

del_lib = np.ctypeslib.load_library('del_python_ext.so','.')
del_lib.filtering.argtypes = [ctypes.c_int, ctypes.c_int, ctypes.c_int, ctypes.c_double, ctypes.c_int,\
                              ctypes.c_char_p, ctypes.POINTER(ctypes.c_double),\
                              ctypes.POINTER(ctypes.c_double), ctypes.POINTER(ctypes.c_double),\
                              ctypes.POINTER(ctypes.c_double), ctypes.POINTER(ctypes.c_double)]
del_lib.filtering.restype = ctypes.c_int


class DemoPanel1(wx.Panel):
    def __init__(self, *args, **kwds):
        # begin wxGlade: DemoPanel1.__init__
        kwds["style"] = wx.TAB_TRAVERSAL
        wx.Panel.__init__(self, *args, **kwds)

        self.__set_properties()
        self.__do_layout()
        # end wxGlade
        self.figure = Figure(figsize=(6,4), dpi=80)
        self.axes = self.figure.add_subplot(111)
        self.canvas = FigureCanvas(self, wx.ID_ANY, self.figure)
        self.axes.set_autoscale_on(False)
        self.axes.set_xlim([0,100])
        self.axes.set_ylim([-30,30])
        self.axes.set_xticks(range(0,101,5))
        self.axes.set_yticks(range(-30,31,5))
        self.exp_x = [None] * 100
        self.percentile_x_95 = [None] * 100
        self.percentile_x_5 = [None] * 100
        self.real_x = [None] * 100
        x_file = open('test_data_latent_state')
        for i in range(100):
            self.real_x[i] = float(x_file.readline())
        x_file.close()
        self.l_exp_x, = self.axes.plot(range(100), self.exp_x, label='mean') #plot return one element tuple
        self.l_real_x, = self.axes.plot(range(100), self.real_x, label='real value')
        self.l_percentile_x_95, = self.axes.plot(range(100), self.percentile_x_95, label='95% percentile')
        self.l_percentile_x_5, = self.axes.plot(range(100), self.percentile_x_5, label='5% percentile')
        self.axes.legend(loc='upper center', ncol=4, prop=font_manager.FontProperties(size=10))
        self.axes.set_title('latent state')
	self.axes.set_xlabel('time (s)')
        self.canvas.draw()
        self.bg = self.canvas.copy_from_bbox(self.axes.bbox)

    def __set_properties(self):
        # begin wxGlade: DemoPanel1.__set_properties
        pass
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: DemoPanel1.__do_layout
        pass
        # end wxGlade

# end of class DemoPanel1

class DemoPanel2(wx.Panel):
    def __init__(self, *args, **kwds):
        # begin wxGlade: DemoPanel2.__init__
        kwds["style"] = wx.TAB_TRAVERSAL
        wx.Panel.__init__(self, *args, **kwds)

        self.__set_properties()
        self.__do_layout()
        # end wxGlade
        self.figure = Figure(figsize=(6,4), dpi=80)
        self.axes = self.figure.add_subplot(111)
        self.canvas = FigureCanvas(self, wx.ID_ANY, self.figure)
        self.axes.set_autoscale_on(False)
        self.axes.axis([-20,20,0,0.7])
        self.axes.set_title('Histogram')

        #self.particles = [None] 
        #self.axes.hist(self.particles, 25, label = "Histogram") #hist return 3 elements tuple
        #self.axes.legend()
        self.canvas.draw()
        #self.bg = self.canvas.copy_from_bbox(self.axes.bbox)
        

    def __set_properties(self):
        # begin wxGlade: DemoPanel2.__set_properties
        pass
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: DemoPanel2.__do_layout
        pass
        # end wxGlade

# end of class DemoPanel2

class DemoPanel3(wx.Panel):
    def __init__(self, *args, **kwds):
        # begin wxGlade: DemoPanel3.__init__
        kwds["style"] = wx.TAB_TRAVERSAL
        wx.Panel.__init__(self, *args, **kwds)

        self.__set_properties()
        self.__do_layout()
        # end wxGlade
        
        self.figure = Figure(figsize=(6,4), dpi=80)
        self.axes = self.figure.add_subplot(111)
        self.canvas = FigureCanvas(self, wx.ID_ANY, self.figure)
        self.axes.set_autoscale_on(False)
        self.axes.set_xlim([0,100])
        self.axes.set_ylim([-5,30])
        self.axes.set_xticks(range(0,101,5))
        self.axes.set_yticks(range(-5,31,5))
        self.data = [None] * 100
        self.data_up2_now = [None] * 100
        data_file = open('test_data')
        for i in range(100):
            self.data[i] = float(data_file.readline())
        data_file.close()
        self.axes.set_title('observations')
        self.axes.set_xlabel('time (s)')
        self.l_data, = self.axes.plot(range(100), self.data_up2_now, 'kx')
        self.bg = self.canvas.copy_from_bbox(self.axes.bbox)



    def __set_properties(self):
        # begin wxGlade: DemoPanel3.__set_properties
        pass
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: DemoPanel3.__do_layout
        pass
        # end wxGlade

# end of class DemoPanel3

class DemoPanel4(wx.Panel):
    def __init__(self, *args, **kwds):
        # begin wxGlade: DemoPanel4.__init__
        kwds["style"] = wx.TAB_TRAVERSAL
        wx.Panel.__init__(self, *args, **kwds)

        self.__set_properties()
        self.__do_layout()
        # end wxGlade
        self.figure = Figure(figsize=(6,4), dpi=80)
        self.axes = self.figure.add_subplot(111)
        self.canvas = FigureCanvas(self, wx.ID_ANY, self.figure)
        self.axes.set_autoscale_on(False)
        self.axes.axis([-20,20,0,1])
        self.axes.set_title('Density')

        #self.particles = [None] 
        #self.axes.hist(self.particles, 25, label = "Histogram") #hist return 3 elements tuple
        #self.axes.legend()
        self.canvas.draw()

    def __set_properties(self):
        # begin wxGlade: DemoPanel4.__set_properties
        pass
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: DemoPanel4.__do_layout
        pass
        # end wxGlade

# end of class DemoPanel4

class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.panel_2 = wx.Panel(self, -1)
        self.label_2 = wx.StaticText(self.panel_2, -1, "   Data Source")
        self.text_ctrl_1 = wx.TextCtrl(self.panel_2, -1, "")
        self.panel_3 = wx.Panel(self, -1)
        self.label_3 = wx.StaticText(self.panel_3, -1, "          Filter\n         Types")
        self.choice_1 = wx.Choice(self.panel_3, -1, choices=["bootstrap", "APF"])
        self.panel_4 = wx.Panel(self, -1)
        self.label_4 = wx.StaticText(self.panel_4, -1, "        Resample\n         Methods")
        self.choice_2 = wx.Choice(self.panel_4, -1, choices=["Mutinominal", "Residual", "Systematic", "Stratified"])
        self.panel_5 = wx.Panel(self, -1)
        self.label_5 = wx.StaticText(self.panel_5, -1, "         Models\n")
        self.choice_3 = wx.Choice(self.panel_5, -1, choices=["BearingOnly"])
        self.panel_6 = wx.Panel(self, -1)
        self.label_6 = wx.StaticText(self.panel_6, -1, "         Time\n        step (s)")
        self.text_ctrl_2 = wx.TextCtrl(self.panel_6, -1, "")
        self.panel_7 = wx.Panel(self, -1)
        self.label_7 = wx.StaticText(self.panel_7, -1, "         Particle\n        numbers")
        self.text_ctrl_3 = wx.TextCtrl(self.panel_7, -1, "")
        self.panel_8 = wx.Panel(self, -1)
        self.button_1 = wx.Button(self.panel_8, -1, "Run")
        self.button_2 = wx.Button(self, -1, "Stop")
        self.panel_1 = DemoPanel1(self, -1)
        self.panel_10 = DemoPanel2(self, -1)
        self.panel_9 = DemoPanel3(self, -1)
        self.panel_11 = DemoPanel4(self, -1)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.runFilter, self.button_1)
        self.Bind(wx.EVT_BUTTON, self.stopFilter, self.button_2)
        # end wxGlade
        
        self.timer = wx.Timer(self)
        self.Bind(wx.EVT_TIMER, self.onTimer, self.timer)

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle("Particle Filtering Demo_Erli")
        self.label_2.SetMinSize((120, 27))
        self.label_2.SetFont(wx.Font(11, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.text_ctrl_1.SetMinSize((120, 20))
        self.choice_1.SetSelection(0)
        self.choice_2.SetSelection(0)
        self.choice_3.SetSelection(0)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_4 = wx.BoxSizer(wx.VERTICAL)
        grid_sizer_1 = wx.GridSizer(2, 2, 0, 0)
        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_12 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_11 = wx.BoxSizer(wx.VERTICAL)
        sizer_10 = wx.BoxSizer(wx.VERTICAL)
        sizer_9 = wx.BoxSizer(wx.VERTICAL)
        sizer_8 = wx.BoxSizer(wx.VERTICAL)
        sizer_7 = wx.BoxSizer(wx.VERTICAL)
        sizer_6 = wx.BoxSizer(wx.VERTICAL)
        sizer_6.Add(self.label_2, 0, wx.EXPAND, 0)
        sizer_6.Add(self.text_ctrl_1, 1, wx.EXPAND, 0)
        self.panel_2.SetSizer(sizer_6)
        sizer_5.Add(self.panel_2, 1, wx.EXPAND, 0)
        sizer_7.Add(self.label_3, 0, wx.EXPAND, 0)
        sizer_7.Add(self.choice_1, 0, wx.EXPAND, 0)
        self.panel_3.SetSizer(sizer_7)
        sizer_5.Add(self.panel_3, 1, wx.EXPAND, 0)
        sizer_8.Add(self.label_4, 0, wx.EXPAND, 0)
        sizer_8.Add(self.choice_2, 0, wx.EXPAND, 0)
        self.panel_4.SetSizer(sizer_8)
        sizer_5.Add(self.panel_4, 1, wx.EXPAND, 0)
        sizer_9.Add(self.label_5, 0, wx.EXPAND, 0)
        sizer_9.Add(self.choice_3, 0, wx.EXPAND, 0)
        self.panel_5.SetSizer(sizer_9)
        sizer_5.Add(self.panel_5, 0, wx.EXPAND, 0)
        sizer_10.Add(self.label_6, 0, wx.EXPAND, 0)
        sizer_10.Add(self.text_ctrl_2, 0, wx.EXPAND, 0)
        self.panel_6.SetSizer(sizer_10)
        sizer_5.Add(self.panel_6, 1, wx.EXPAND, 0)
        sizer_11.Add(self.label_7, 0, wx.EXPAND, 0)
        sizer_11.Add(self.text_ctrl_3, 0, wx.EXPAND, 0)
        self.panel_7.SetSizer(sizer_11)
        sizer_5.Add(self.panel_7, 1, wx.EXPAND, 0)
        sizer_12.Add(self.button_1, 0, 0, 0)
        self.panel_8.SetSizer(sizer_12)
        sizer_5.Add(self.panel_8, 1, wx.EXPAND, 0)
        sizer_5.Add(self.button_2, 0, 0, 0)
        sizer_4.Add(sizer_5, 0, wx.EXPAND, 0)
        grid_sizer_1.Add(self.panel_1, 1, wx.EXPAND, 0)
        grid_sizer_1.Add(self.panel_10, 1, wx.EXPAND, 0)
        grid_sizer_1.Add(self.panel_9, 1, wx.EXPAND, 0)
        grid_sizer_1.Add(self.panel_11, 1, wx.EXPAND, 0)
        sizer_4.Add(grid_sizer_1, 1, wx.EXPAND, 0)
        sizer_1.Add(sizer_4, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        self.Layout()
        # end wxGlade

    def runFilter(self, event):  # wxGlade: MyFrame.<event_handler>
        self.data_file = str(self.text_ctrl_1.GetValue())
        filter = self.choice_1.GetStringSelection()
        self.filter_index = self.choice_1.GetSelection()
        resample = self.choice_2.GetStringSelection()
        self.resample_index = self.choice_2.GetSelection()
        model = self.choice_3.GetStringSelection()
        self.model_index = self.choice_3.GetSelection()
        self.time_step = float(self.text_ctrl_2.GetValue())
        self.particle_number = int(self.text_ctrl_3.GetValue())
        self.weight = np.arange(1,self.particle_number+1,1.0)
        self.state = np.arange(1,self.particle_number+1,1.0)
        self.i = 0
        self.mean = np.array([0.0])
        self.percentile_95 = np.array([0.0])
        self.percentile_5 = np.array([0.0])
        #self.thread_dead = True;
        self.timer.Start(1000*self.time_step)

    def stopFilter(self, event):  # wxGlade: MyFrame.<event_handler>
        print "Event handler `stopFilter' not implemented!"
        event.Skip()
        
    def onTimer(self, event):   
        del_lib.filtering(self.model_index, self.filter_index, self.resample_index,\
                                 self.time_step, self.particle_number, self.data_file,\
                                 self.weight.ctypes.data_as(ctypes.POINTER(ctypes.c_double)),\
                                 self.state.ctypes.data_as(ctypes.POINTER(ctypes.c_double)),\
                                 self.mean.ctypes.data_as(ctypes.POINTER(ctypes.c_double)),\
                                 self.percentile_95.ctypes.data_as(ctypes.POINTER(ctypes.c_double)),\
                                 self.percentile_5.ctypes.data_as(ctypes.POINTER(ctypes.c_double)))
        self.panel_1.exp_x[self.i] = self.mean[0]
        self.panel_1.percentile_x_95[self.i] = self.percentile_95[0]
        self.panel_1.percentile_x_5[self.i] = self.percentile_5[0]
        self.panel_9.data_up2_now[self.i] = self.panel_9.data[self.i]
        self.i = self.i + 1
        
        self.panel_1.canvas.restore_region(self.panel_1.bg)
        self.panel_1.l_exp_x.set_ydata(self.panel_1.exp_x)
        self.panel_1.l_percentile_x_95.set_ydata(self.panel_1.percentile_x_95)
        self.panel_1.l_percentile_x_5.set_ydata(self.panel_1.percentile_x_5)
        
        self.panel_1.axes.draw_artist(self.panel_1.l_exp_x)
        self.panel_1.axes.draw_artist(self.panel_1.l_percentile_x_95)
        self.panel_1.axes.draw_artist(self.panel_1.l_percentile_x_5)
        self.panel_1.canvas.blit(self.panel_1.axes.bbox)
        
        
        self.panel_9.canvas.restore_region(self.panel_9.bg)
        self.panel_9.l_data.set_ydata(self.panel_9.data_up2_now)
        self.panel_9.axes.draw_artist(self.panel_9.l_data)
        self.panel_9.canvas.blit(self.panel_9.axes.bbox)
        
        
        #self.panel_10.canvas.restore_region(self.panel_10.bg)
        #self.panel_10.axes.hist(self.state, bins = 50, normed = True, weights = self.weight, label = "Histogram")
        #self.panel_10.canvas.draw()
        #self.panel_10.canvas.blit(self.panel_10.axes.bbox)
        
        #self.panel_10.figure = Figure(figsize=(6,4), dpi=80)
        #self.panel_10.axes = self.panel_10.figure.add_subplot(111)
        #self.panel_10.canvas = FigureCanvas(self, wx.ID_ANY, self.figure)
        #self.panel_10.axes.set_autoscale_on(False)
       # self.panel_10.axes.axis([-20,20,0,0.7])
       # self.panel_10.axes.set_title('Histogram')
        self.panel_10.axes.clear()
        self.panel_10.axes.set_autoscale_on(False)
        self.panel_10.axes.axis([-20,20,0,0.7])
        self.panel_10.axes.set_title('Histogram')
        pdf, bins, patches = self.panel_10.axes.hist(self.state, bins = 100, normed = True, weights = self.weight, facecolor='green')
        self.panel_10.canvas.draw()
        #self.particles = [None] 
        #self.axes.hist(self.particles, 25, label = "Histogram") #hist return 3 elements tuple
        #self.axes.legend()

        # add a 'best fit' line
        #mu, sigma = 0, 1
        #y = normpdf( bins, mu, sigma)
        self.panel_11.axes.clear()
        self.panel_11.axes.set_autoscale_on(False)
        self.panel_11.axes.axis([-20,20,0,0.7])
        self.panel_11.axes.set_title('Density')
        bincenters = 0.5*(bins[1:]+bins[:-1])
        line, = self.panel_11.axes.plot(bincenters, pdf, linewidth = 1)
        self.panel_11.canvas.draw()
        
  

# end of class MyFrame
if __name__ == "__main__":
    Demo_Erli = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    frame_1 = MyFrame(None, -1, "")
    Demo_Erli.SetTopWindow(frame_1)
    frame_1.Show()
    Demo_Erli.MainLoop()
